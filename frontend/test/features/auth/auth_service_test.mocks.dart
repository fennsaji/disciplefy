// Mocks generated by Mockito 5.4.5 from annotations
// in disciplefy_bible_study/test/features/auth/auth_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:disciplefy_bible_study/features/auth/data/services/auth_storage_service.dart'
    as _i7;
import 'package:disciplefy_bible_study/features/auth/data/services/authentication_service.dart'
    as _i4;
import 'package:disciplefy_bible_study/features/auth/domain/entities/auth_params.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i2.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  Map<String, dynamic> get appMetadata => (super.noSuchMethod(
        Invocation.getter(#appMetadata),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  String get aud => (super.noSuchMethod(
        Invocation.getter(#aud),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#aud),
        ),
      ) as String);

  @override
  String get createdAt => (super.noSuchMethod(
        Invocation.getter(#createdAt),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#createdAt),
        ),
      ) as String);

  @override
  bool get isAnonymous => (super.noSuchMethod(
        Invocation.getter(#isAnonymous),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [AuthenticationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationService extends _i1.Mock
    implements _i4.AuthenticationService {
  MockAuthenticationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  _i5.Stream<_i2.AuthState> get authStateChanges => (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i5.Stream<_i2.AuthState>.empty(),
      ) as _i5.Stream<_i2.AuthState>);

  @override
  _i5.Future<bool> isAuthenticatedAsync() => (super.noSuchMethod(
        Invocation.method(
          #isAuthenticatedAsync,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isTokenValid() => (super.noSuchMethod(
        Invocation.method(
          #isTokenValid,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> processGoogleOAuthCallback(
          _i6.GoogleOAuthCallbackParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #processGoogleOAuthCallback,
          [params],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> signInWithApple() => (super.noSuchMethod(
        Invocation.method(
          #signInWithApple,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> signInAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteAccount() => (super.noSuchMethod(
        Invocation.method(
          #deleteAccount,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i2.User createAnonymousUser() => (super.noSuchMethod(
        Invocation.method(
          #createAnonymousUser,
          [],
        ),
        returnValue: _FakeUser_0(
          this,
          Invocation.method(
            #createAnonymousUser,
            [],
          ),
        ),
      ) as _i2.User);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthStorageService extends _i1.Mock
    implements _i7.AuthStorageService {
  MockAuthStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> storeAuthData(_i6.AuthDataStorageParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeAuthData,
          [params],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> getUserType() => (super.noSuchMethod(
        Invocation.method(
          #getUserType,
          [],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<String?> getUserId() => (super.noSuchMethod(
        Invocation.method(
          #getUserId,
          [],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<bool> isOnboardingCompleted() => (super.noSuchMethod(
        Invocation.method(
          #isOnboardingCompleted,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> clearAllData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllData,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
