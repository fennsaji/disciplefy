name: Frontend Deployment - Web & Mobile

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build'
        required: true
        default: 'web'
        type: choice
        options:
        - web
        - android
        - ios
        - all

concurrency:
  group: frontend-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.24.1'

jobs:
  build-web:
    name: Build Flutter Web
    runs-on: ubuntu-latest
    if: github.event.inputs.platform == 'web' || github.event.inputs.platform == 'all' || github.event.inputs.platform == ''
    timeout-minutes: 20
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          frontend/.dart_tool
        key: ${{ runner.os }}-pub-${{ hashFiles('frontend/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-
        
    - name: Get Flutter dependencies
      working-directory: ./frontend
      run: flutter pub get
      
    - name: Build Web App (Release)
      working-directory: ./frontend
      run: |
        echo "🔨 Building Flutter Web app for production..."
        
        flutter build web \
          --release \
          --web-renderer canvaskit \
          --base-href "/" \
          --dart-define=FLUTTER_WEB_BUILD=true \
          --dart-define=SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
          --dart-define=SUPABASE_ANON_KEY="${{ secrets.SUPABASE_ANON_KEY }}"
          
        echo "✅ Web build completed successfully"
        
        # Display build size
        echo "📦 Build size information:"
        du -sh build/web/
        
    - name: Optimize Web Build
      working-directory: ./frontend
      run: |
        echo "⚡ Optimizing web build..."
        
        # Compress assets if gzip is available
        if command -v gzip &> /dev/null; then
          find build/web -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" \) -exec gzip -k {} \;
          echo "✅ Assets compressed with gzip"
        fi
        
        # Show final build structure
        echo "📁 Final build structure:"
        ls -la build/web/
        
    - name: Upload Web build artifact
      uses: actions/upload-artifact@v4
      with:
        name: flutter-web-build
        path: frontend/build/web/
        retention-days: 30
        compression-level: 6

  deploy-web:
    name: Deploy Web to Hosting
    runs-on: ubuntu-latest
    needs: build-web
    if: github.ref == 'refs/heads/main' && (github.event.inputs.platform == 'web' || github.event.inputs.platform == 'all' || github.event.inputs.platform == '')
    timeout-minutes: 10
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Web build
      uses: actions/download-artifact@v4
      with:
        name: flutter-web-build
        path: ./web-build
        
    - name: Setup Node.js for deployment
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Deploy to Hosting Platform
      run: |
        echo "🌐 Preparing web deployment..."
        
        # For now, this is a placeholder for web deployment
        # TODO: Implement actual deployment based on hosting choice:
        # - Supabase Storage
        # - Vercel
        # - Netlify
        # - Firebase Hosting
        # - GitHub Pages
        
        echo "📁 Web build contents:"
        ls -la web-build/
        
        echo "📊 Build size analysis:"
        du -sh web-build/*
        
        # Placeholder deployment script
        echo "🚀 Web deployment placeholder - configure based on hosting platform"
        echo "✅ Deployment completed successfully"
        
        # Output deployment URL (placeholder)
        echo "🌍 App deployed at: https://app.disciplefy.in"

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-web, build-android, build-ios, deploy-web]
    if: always()
    
    steps:
    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-web.result }}" = "success" ]; then
          echo "✅ **Web Build**: Successful" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.build-web.result }}" = "skipped" ]; then
          echo "⏭️ **Web Build**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Web Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build-android.result }}" = "success" ]; then
          echo "✅ **Android Build**: Successful" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.build-android.result }}" = "skipped" ]; then
          echo "⏭️ **Android Build**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Android Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build-ios.result }}" = "success" ]; then
          echo "✅ **iOS Build**: Successful" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.build-ios.result }}" = "skipped" ]; then
          echo "⏭️ **iOS Build**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **iOS Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-web.result }}" = "success" ]; then
          echo "✅ **Web Deployment**: Successful" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy-web.result }}" = "skipped" ]; then
          echo "⏭️ **Web Deployment**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Web Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Build Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Check the **Actions** tab for downloadable build artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Artifacts are retained for 30 days" >> $GITHUB_STEP_SUMMARY