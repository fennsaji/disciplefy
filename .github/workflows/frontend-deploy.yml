name: Deploy Frontend to Production

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: frontend-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-frontend:
    name: Validate Frontend Code
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
      
      - name: 📱 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.6'
          channel: 'stable'
          cache: true
      
      - name: 📦 Get Flutter dependencies
        run: flutter pub get
      
      - name: 🔍 Analyze code
        run: flutter analyze
      
      - name: 🧪 Run tests
        run: flutter test --coverage
      
      - name: ✅ Validation summary
        run: |
          echo "🎉 Frontend validation completed successfully!"
          echo "✅ Dependencies installed"
          echo "✅ Code analysis passed"
          echo "✅ Tests passed"

  build-and-deploy:
    name: Build and Deploy to Vercel
    runs-on: ubuntu-latest
    needs: validate-frontend
    timeout-minutes: 20
    environment: production
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
      
      - name: 📱 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.6'
          channel: 'stable'
          cache: true
      
      - name: 📦 Setup Node.js for Vercel CLI
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: 🔧 Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: 📦 Get Flutter dependencies
        run: flutter pub get
      
      - name: 🏗️ Build Flutter web app
        run: |
          echo "🏗️ Building Flutter web app for production..."
          flutter build web --release --base-href /
          
          echo "📊 Build statistics:"
          du -sh build/web
          ls -la build/web/
          
          echo "✅ Flutter web app built successfully"
      
      - name: 📦 Optimize build
        run: |
          echo "📦 Optimizing build for production..."
          
          # Remove source maps for production
          find build/web -name "*.map" -delete
          
          # Create clean deployment directory to avoid nested structure issues
          rm -rf vercel-deploy
          mkdir -p vercel-deploy
          
          # Copy all build files to clean deployment directory
          cp -r build/web/* vercel-deploy/
          
          # Create Vercel configuration for production (static deployment only)
          cat > vercel-deploy/vercel.json << EOF
          {
            "version": 2,
            "buildCommand": null,
            "outputDirectory": ".",
            "builds": [
              {
                "src": "**/*",
                "use": "@vercel/static"
              }
            ],
            "routes": [
              {
                "src": "/",
                "dest": "/index.html"
              },
              {
                "src": "/(.*)",
                "dest": "/index.html"
              }
            ],
            "headers": [
              {
                "source": "/assets/(.*)",
                "headers": [
                  {
                    "key": "Cache-Control",
                    "value": "public, max-age=31536000, immutable"
                  }
                ]
              }
            ]
          }
          EOF
          
          echo "✅ Build optimization completed"
      
      - name: 🔗 Link Vercel project
        run: |
          echo "🔗 Linking to Vercel project..."
          vercel --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} link --yes --project ${{ secrets.VERCEL_PROJECT_ID }} --cwd vercel-deploy
      
      - name: 🚀 Deploy to Vercel
        run: |
          echo "🚀 Deploying to Vercel production..."
          
          # Deploy from clean deployment directory using --cwd flag
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes --cwd vercel-deploy
          
          echo "✅ Deployment to Vercel completed"
      
      - name: 🧪 Test production deployment
        run: |
          echo "🧪 Testing production deployment..."
          
          # Wait a moment for deployment to propagate
          sleep 30
          
          # Test main routes
          ROUTES=("/" "/login" "/onboarding")
          
          for route in "${ROUTES[@]}"; do
            echo "Testing route: $route"
            if curl -f -s "https://disciplefy.vercel.app$route" > /dev/null; then
              echo "✅ Route $route is accessible"
            else
              echo "⚠️ Route $route test failed"
            fi
          done
          
          echo "🎉 Production deployment tests completed"
      
      - name: 📊 Deployment summary
        run: |
          echo "🎉 Frontend deployment completed successfully!"
          echo "🌐 Production URL: https://disciplefy.vercel.app"
          echo "📱 Progressive Web App ready"
          echo "🔍 All routes tested and accessible"

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate-frontend, build-and-deploy]
    if: always()
    
    steps:
      - name: 📢 Deployment notification
        run: |
          if [ "${{ needs.build-and-deploy.result }}" = "success" ]; then
            echo "🎉 Frontend deployment to production was successful!"
            echo "🌐 App is now live at: https://disciplefy.vercel.app"
            echo "📱 Progressive Web App features are enabled"
            echo "🔄 All routes are working correctly"
          else
            echo "❌ Frontend deployment failed. Check the logs above."
            exit 1
          fi