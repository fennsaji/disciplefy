name: Backend Production Deployment

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:
    inputs:
      deploy_functions:
        description: 'Deploy Edge Functions'
        required: false
        default: true
        type: boolean
      deploy_migrations:
        description: 'Deploy Database Migrations'
        required: false
        default: true
        type: boolean
      deploy_policies:
        description: 'Deploy RLS Policies'
        required: false
        default: false
        type: boolean

concurrency:
  group: backend-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-backend:
    name: Validate Backend Code
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 🔄 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🦕 Setup Deno
      uses: denoland/setup-deno@v2
      with:
        deno-version: v2.4.x
        
    - name: 🔧 Verify Deno installation
      run: |
        deno --version
        echo "✅ Deno is ready for TypeScript compilation checks"
        
    - name: 🔍 TypeScript compilation check
      working-directory: ./backend
      run: |
        # Check if TypeScript files can be compiled using Deno
        find supabase/functions -name "*.ts" -type f | while read -r file; do
          echo "Checking TypeScript syntax: $file"
          deno check "$file" || {
            echo "❌ TypeScript error in $file"
            exit 1
          }
        done
        echo "✅ All TypeScript files are valid"
        
    - name: 🧪 Validate Edge Function structure
      working-directory: ./backend
      run: |
        echo "🔍 Validating Edge Function structure..."
        
        # Check that each function has an index.ts file (exclude _shared directory)
        for func_dir in supabase/functions/*/; do
          func_name=$(basename "$func_dir")
          
          # Skip _shared directory as it's not a function
          if [ "$func_name" = "_shared" ]; then
            echo "ℹ️ Skipping _shared directory (utility/shared code)"
            continue
          fi
          
          if [ ! -f "${func_dir}index.ts" ]; then
            echo "❌ Missing index.ts in function: $func_name"
            exit 1
          fi
          
          # Check for basic Deno serve pattern
          if ! grep -q "Deno.serve" "${func_dir}index.ts"; then
            echo "⚠️ Function $func_name might not follow Deno.serve pattern"
          fi
          
          echo "✅ Function $func_name structure is valid"
        done
        
    - name: 🔒 Security scan
      working-directory: ./backend
      run: |
        echo "🔒 Running basic security checks..."
        
        # Check for potential security issues
        if grep -r "console.log.*password\|console.log.*secret\|console.log.*key" supabase/functions/ 2>/dev/null; then
          echo "⚠️ Found potential credential logging"
        fi
        
        # Check for hardcoded URLs
        if grep -r "localhost\|127.0.0.1" supabase/functions/ --exclude-dir=node_modules 2>/dev/null; then
          echo "ℹ️ Found localhost references (may be intentional for dev)"
        fi
        
        echo "✅ Security scan completed"

  deploy-to-production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: validate-backend
    timeout-minutes: 15
    environment: production
    
    outputs:
      DEPLOY_ENV: ${{ steps.env-setup.outputs.deploy_env }}
      PROJECT_REF: ${{ steps.env-setup.outputs.project_ref }}
      
    steps:
    - name: 🔄 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: 🔧 Install Supabase CLI
      run: |
        # Install Supabase CLI using GitHub releases (latest version)
        SUPABASE_VERSION="2.33.9"
        curl -fsSL "https://github.com/supabase/cli/releases/download/v${SUPABASE_VERSION}/supabase_linux_amd64.tar.gz" | tar -xz -C /tmp
        sudo mv /tmp/supabase /usr/local/bin/supabase
        chmod +x /usr/local/bin/supabase
        
    - name: ✅ Verify Supabase CLI
      run: |
        # Make sure CLI is accessible
        supabase --version
        echo "✅ Supabase CLI is ready"
      
    - name: 🔍 Setup production environment
      id: env-setup
      run: |
        echo "DEPLOY_ENV=production" >> $GITHUB_ENV
        echo "PROJECT_REF=${SUPABASE_PROJECT_REF}" >> $GITHUB_ENV
        echo "deploy_env=production" >> $GITHUB_OUTPUT
        echo "project_ref=${SUPABASE_PROJECT_REF}" >> $GITHUB_OUTPUT
        
        echo "🎯 Deploying to: production"
        echo "📍 Project reference: ${SUPABASE_PROJECT_REF}"
      env:
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}

      
    - name: ✅ Validate Supabase connection
      working-directory: ./backend
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        echo "🔗 Testing Supabase connection to ${{ env.DEPLOY_ENV }}..."
        if [ -z "${{ env.PROJECT_REF }}" ]; then
          echo "❌ Project reference not set for ${{ env.DEPLOY_ENV }}"
          exit 1
        fi
        supabase projects list > /dev/null
        echo "✅ Supabase connection successful"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: 📝 Create production environment file
      working-directory: ./backend
      run: |
        echo "📝 Creating ${{ env.DEPLOY_ENV }} environment file..."
        cat > .env.${{ env.DEPLOY_ENV }} << EOF
        # Supabase Configuration (${{ env.DEPLOY_ENV }})
        SUPABASE_PROJECT_REF=${{ env.PROJECT_REF }}
        SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_URL=https://${{ env.PROJECT_REF }}.supabase.co
        SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        
        # LLM Configuration (${{ env.DEPLOY_ENV }})
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        LLM_PROVIDER=${{ secrets.LLM_PROVIDER || 'openai' }}
        
        # Authentication (${{ env.DEPLOY_ENV }})
        GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
        GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
        
        # Application URLs (${{ env.DEPLOY_ENV }})
        SITE_URL=https://disciplefy.vercel.app
        ADDITIONAL_REDIRECT_URLS=http://localhost:59641/auth/callback,https://disciplefy.vercel.app/auth/callback
        
        # Security (${{ env.DEPLOY_ENV }})
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        
        # ${{ env.DEPLOY_ENV }} settings
        LOG_LEVEL=info
        USE_MOCK=false
        NODE_ENV=${{ env.DEPLOY_ENV }}
        ANONYMOUS_RATE_LIMIT=5
        AUTHENTICATED_RATE_LIMIT=10
        API_REQUEST_LIMIT=100
        EOF
        echo "✅ ${{ env.DEPLOY_ENV }} environment file created"

    - name: 🔗 Link to Supabase production project
      run: |
        echo "🔗 Linking to Supabase production project..."
        
        echo "📌 First character of SUPABASE_PROJECT_REF: ${SUPABASE_PROJECT_REF:0:1}"
        echo "📌 First character of SUPABASE_DB_PASSWORD: ${SUPABASE_DB_PASSWORD:0:1}"
        
        echo "⚠️ Checking required environment variables..."
        if [ -z "$SUPABASE_PROJECT_REF" ]; then
          echo "❌ SUPABASE_PROJECT_REF is missing!"
          exit 1
        fi
        if [ -z "$SUPABASE_DB_PASSWORD" ]; then
          echo "❌ SUPABASE_DB_PASSWORD is missing!"
          exit 1
        fi

        echo "✅ Environment variables look okay."

        echo "🔐 Authenticating..."
        supabase link --project-ref "$SUPABASE_PROJECT_REF"

        echo "🔌 Connecting to remote database..."
        supabase db remote set \
          --db-url "postgres://postgres:${SUPABASE_DB_PASSWORD}@db.${SUPABASE_PROJECT_REF}.supabase.co:5432/postgres" \
          --debug
      env:
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

    - name: 🔗 Link Supabase & Run DB Migration
      run: |
        echo "🔍 Debugging environment..."

        echo "📌 First char of SUPABASE_PROJECT_REF: ${SUPABASE_PROJECT_REF:0:1}"
        echo "📌 First char of SUPABASE_DB_PASSWORD: ${SUPABASE_DB_PASSWORD:0:1}"

        echo "⚠️ Checking required environment variables..."
        if [ -z "$SUPABASE_PROJECT_REF" ]; then
          echo "❌ SUPABASE_PROJECT_REF is missing!"
          exit 1
        fi
        if [ -z "$SUPABASE_DB_PASSWORD" ]; then
          echo "❌ SUPABASE_DB_PASSWORD is missing!"
          exit 1
        fi

        echo "✅ Environment variables are set."

        echo "🔐 Linking to Supabase project..."
        supabase link --project-ref "$SUPABASE_PROJECT_REF"

        echo "🔌 Setting up remote DB connection..."
        supabase db remote set \
          --db-url "postgres://postgres:${SUPABASE_DB_PASSWORD}@db.${SUPABASE_PROJECT_REF}.supabase.co:5432/postgres" \
          --debug

        echo "📦 Running DB migrations..."
        supabase db push --debug
      env:
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

    - name: 🔒 Deploy RLS Policies
      if: ${{ github.event.inputs.deploy_policies == 'true' }}
      working-directory: ./backend
      run: |
        echo "🔒 Deploying RLS policies to ${{ env.DEPLOY_ENV }}..."
        if [ -d "supabase/policies" ] && [ "$(ls -A supabase/policies 2>/dev/null)" ]; then
          for policy_file in supabase/policies/*.sql; do
            if [ -f "$policy_file" ]; then
              policy_name=$(basename "$policy_file" .sql)
              echo "🔐 Applying policy: $policy_name"
              supabase db query --file "$policy_file" --db-url "postgres://postgres:${SUPABASE_DB_PASSWORD}@db.${SUPABASE_PROJECT_REF}.supabase.co:5432/postgres" 
            fi
          done
          echo "✅ RLS policies deployed to ${{ env.DEPLOY_ENV }}"
        else
          echo "ℹ️ No RLS policies to deploy"
        fi
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: 📦 Deploy Edge Functions
      if: ${{ github.event.inputs.deploy_functions != 'false' }}
      working-directory: ./backend
      run: |
        echo "🚀 Deploying Edge Functions to ${{ env.DEPLOY_ENV }}..."

        # Deploy all functions with ${{ env.DEPLOY_ENV }} settings
        supabase functions deploy --no-verify-jwt --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --debug

        echo "✅ Edge Functions deployed successfully to ${{ env.DEPLOY_ENV }}"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        
    - name: 🔑 Update Function Secrets
      working-directory: ./backend
      run: |
        echo "🔑 Updating Edge Function secrets for ${{ env.DEPLOY_ENV }}..."
        supabase secrets set --env-file .env.${{ env.DEPLOY_ENV }} --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --debug
        echo "✅ Function secrets updated for ${{ env.DEPLOY_ENV }}"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: 🧪 Test production deployment
      working-directory: ./backend
      run: |
        echo "🧪 Testing ${{ env.DEPLOY_ENV }} deployment..."
        
        # Test health endpoint
        BASE_URL="https://${{ env.PROJECT_REF }}.supabase.co"
        
        if curl -f -s "$BASE_URL/rest/v1/" > /dev/null; then
          echo "✅ Supabase REST API is healthy"
        else
          echo "⚠️ Supabase REST API test failed"
        fi
        
        # Test Edge Functions
        FUNCTIONS=("daily-verse" "topics-recommended")
        for func in "${FUNCTIONS[@]}"; do
          if curl -f -s "$BASE_URL/functions/v1/$func" > /dev/null; then
            echo "✅ Function $func is responding"
          else
            echo "⚠️ Function $func test failed (may be expected for some functions)"
          fi
        done
        
        echo "🎉 ${{ env.DEPLOY_ENV }} deployment tests completed"
        
    - name: 📊 Deployment summary
      run: |
        echo "🎉 Backend deployment to ${{ env.DEPLOY_ENV }} completed!"
        echo "🌐 ${{ env.DEPLOY_ENV }} API: https://${{ env.PROJECT_REF }}.supabase.co"
        echo "📋 Deployed components:"
        echo "   • Edge Functions: ${{ github.event.inputs.deploy_functions != 'false' && '✅' || '⏭️' }}"
        echo "   • Database Migrations: ${{ github.event.inputs.deploy_migrations != 'false' && '✅' || '⏭️' }}"
        echo "   • RLS Policies: ${{ github.event.inputs.deploy_policies == 'true' && '✅' || '⏭️' }}"
        echo "   • Function Secrets: ✅"
        
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "🔍 This is a PR deployment for testing purposes"
          echo "📝 Review the changes and test the deployment before merging"
        fi
      
    - name: 🧹 Security cleanup
      working-directory: ./backend
      if: always()
      run: |
        echo "🧹 Cleaning up sensitive files..."
        rm -f .env.${{ env.DEPLOY_ENV }}
        echo "✅ Cleanup completed"

  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: deploy-to-production
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 💬 Comment deployment status
      uses: actions/github-script@v7
      with:
        script: |
          const deployEnv = '${{ needs.deploy-to-production.outputs.DEPLOY_ENV }}' || 'production';
          const projectRef = '${{ needs.deploy-to-production.outputs.PROJECT_REF }}';
          
          const comment = `## 🚀 Backend Production Deployment
          
          **Environment**: \`${deployEnv}\`
          **Status**: ✅ Deployment Successful
          
          ### 🔗 Test URLs:
          - **API Base**: https://${projectRef}.supabase.co
          - **Functions**: https://${projectRef}.supabase.co/functions/v1/
          - **Studio**: https://app.supabase.com/project/${projectRef}
          
          ### 🧪 Test Endpoints:
          - Daily Verse: https://${projectRef}.supabase.co/functions/v1/daily-verse
          - Topics: https://${projectRef}.supabase.co/functions/v1/topics-recommended
          
          **Note**: This deployment is for testing purposes. Changes will be deployed to production when this PR is merged to main.
          
          ---
          *Deployed from commit: ${context.sha.substring(0, 7)}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate-backend, deploy-to-production]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: 📢 Deployment notification
      run: |
        if [ "${{ needs.deploy-to-production.result }}" = "success" ]; then
          echo "🎉 Backend deployment to ${{ github.event.inputs.environment || 'production' }} was successful!"
          echo "🌐 Production API is now live"
          echo "🧪 Ready for production traffic"
        else
          echo "❌ Backend deployment failed. Check the logs above."
          exit 1
        fi