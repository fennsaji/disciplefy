name: Backend Deployment - Supabase Functions

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

concurrency:
  group: backend-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-backend:
    name: Validate Backend Code
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'backend/package*.json'
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        if [ -f package.json ]; then
          npm ci
        else
          echo "No package.json found, skipping npm install"
        fi
        
    - name: TypeScript compilation check
      working-directory: ./backend
      run: |
        # Check if TypeScript files can be compiled
        find supabase/functions -name "*.ts" -type f | while read -r file; do
          echo "Checking TypeScript syntax: $file"
          npx tsc --noEmit --skipLibCheck "$file" 2>/dev/null || {
            echo "‚ùå TypeScript error in $file"
            exit 1
          }
        done
        echo "‚úÖ All TypeScript files are valid"
        
    - name: Validate Edge Function structure
      working-directory: ./backend
      run: |
        echo "üîç Validating Edge Function structure..."
        
        # Check that each function has an index.ts file
        for func_dir in supabase/functions/*/; do
          func_name=$(basename "$func_dir")
          
          if [ ! -f "${func_dir}index.ts" ]; then
            echo "‚ùå Missing index.ts in function: $func_name"
            exit 1
          fi
          
          # Check for basic Deno serve pattern
          if ! grep -q "Deno.serve" "${func_dir}index.ts"; then
            echo "‚ö†Ô∏è Function $func_name might not follow Deno.serve pattern"
          fi
          
          echo "‚úÖ Function $func_name structure is valid"
        done

  deploy-functions:
    name: Deploy to Supabase
    runs-on: ubuntu-latest
    needs: validate-backend
    timeout-minutes: 15
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Supabase CLI
      run: npm install -g supabase@1.123.4
      
    - name: Validate Supabase connection
      working-directory: ./backend
      run: |
        echo "üîó Testing Supabase connection..."
        supabase projects list --token "$SUPABASE_ACCESS_TOKEN" > /dev/null
        echo "‚úÖ Supabase connection successful"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: Create production environment file
      working-directory: ./backend
      run: |
        echo "üìù Creating production environment file..."
        cat > .env.production << EOF
        # Supabase Configuration
        SUPABASE_PROJECT_REF=${{ secrets.SUPABASE_PROJECT_REF }}
        SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_URL=https://${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co
        SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        
        # LLM Configuration
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        LLM_PROVIDER=${{ secrets.LLM_PROVIDER || 'openai' }}
        
        # Authentication
        GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
        GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
        
        # Application URLs
        SITE_URL=https://disciplefy.vercel.app
        ADDITIONAL_REDIRECT_URLS=https://disciplefy.vercel.app/auth/callback,com.disciplefy.bible_study_app://auth/callback
        
        # Security
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        
        # Production settings
        LOG_LEVEL=error
        USE_MOCK=false
        NODE_ENV=production
        EOF
        echo "‚úÖ Production environment file created"
    
    - name: Link to Supabase project
      working-directory: ./backend
      run: |
        echo "üîó Linking to Supabase project..."
        supabase link --project-ref "$SUPABASE_PROJECT_REF"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
    
    - name: Deploy Database Migrations
      working-directory: ./backend
      run: |
        echo "üóÑÔ∏è Deploying database migrations..."
        if [ -d "supabase/migrations" ] && [ "$(ls -A supabase/migrations 2>/dev/null)" ]; then
          supabase db push --project-ref "$SUPABASE_PROJECT_REF"
          echo "‚úÖ Database migrations deployed"
        else
          echo "‚ÑπÔ∏è No migrations to deploy"
        fi
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
    
    - name: Deploy RLS Policies
      working-directory: ./backend
      run: |
        echo "üîí Deploying RLS policies..."
        if [ -d "supabase/policies" ] && [ "$(ls -A supabase/policies 2>/dev/null)" ]; then
          for policy_file in supabase/policies/*.sql; do
            if [ -f "$policy_file" ]; then
              policy_name=$(basename "$policy_file" .sql)
              echo "üîê Applying policy: $policy_name"
              supabase db query --project-ref "$SUPABASE_PROJECT_REF" --file "$policy_file"
            fi
          done
          echo "‚úÖ RLS policies deployed"
        else
          echo "‚ÑπÔ∏è No RLS policies to deploy"
        fi
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        
    - name: Deploy Edge Functions
      working-directory: ./backend
      run: |
        echo "üöÄ Deploying Edge Functions to ${{ github.event.inputs.environment || 'production' }}..."
        
        # Deploy all functions
        supabase functions deploy --project-ref "$SUPABASE_PROJECT_REF" --no-verify-jwt
        
        echo "‚úÖ Edge Functions deployed successfully"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        
    - name: Update Function Secrets
      working-directory: ./backend
      run: |
        echo "üîë Updating Edge Function secrets..."
        supabase secrets set --env-file .env.production --project-ref "$SUPABASE_PROJECT_REF"
        echo "‚úÖ Function secrets updated"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        
    - name: Verify deployment
      working-directory: ./backend
      run: |
        echo "üîç Verifying deployment..."
        
        # List deployed functions
        supabase functions list --project-ref "$SUPABASE_PROJECT_REF"
        
        # Test a simple endpoint (env-test) if it exists
        if supabase functions list --project-ref "$SUPABASE_PROJECT_REF" | grep -q "env-test"; then
          echo "Testing env-test endpoint..."
          
          response=$(curl -s -w "%{http_code}" \
            "https://$SUPABASE_PROJECT_REF.supabase.co/functions/v1/env-test" \
            -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
            -o /tmp/response.json)
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ env-test endpoint responding correctly"
          else
            echo "‚ö†Ô∏è env-test endpoint returned status: $response"
            cat /tmp/response.json 2>/dev/null || echo "No response body"
          fi
        fi
        
        # Test more Edge Functions
        FUNCTIONS=("daily-verse" "topics-recommended" "auth-session")
        for func in "${FUNCTIONS[@]}"; do
          if curl -f -s "https://$SUPABASE_PROJECT_REF.supabase.co/functions/v1/$func" > /dev/null; then
            echo "‚úÖ Function $func is responding"
          else
            echo "‚ö†Ô∏è Function $func test failed"
          fi
        done
        
        echo "üéâ Deployment verification complete"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        
    - name: Security Cleanup
      working-directory: ./backend
      if: always()
      run: |
        echo "üßπ Cleaning up sensitive files..."
        rm -f .env.production
        echo "‚úÖ Cleanup completed"

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate-backend, deploy-functions]
    if: always()
    
    steps:
    - name: Deployment notification
      run: |
        if [ "${{ needs.deploy-functions.result }}" = "success" ]; then
          echo "üéâ Backend deployment to ${{ github.event.inputs.environment || 'production' }} was successful!"
          echo "Functions are now live at: https://${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co/functions/v1/"
        else
          echo "‚ùå Backend deployment failed. Check the logs above."
          exit 1
        fi