name: Backend Development Deployment

on:
  push:
    branches: [dev]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy-dev.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
      deploy_functions:
        description: 'Deploy Edge Functions'
        required: false
        default: true
        type: boolean
      deploy_migrations:
        description: 'Deploy Database Migrations'
        required: false
        default: true
        type: boolean
      deploy_policies:
        description: 'Deploy RLS Policies'
        required: false
        default: false
        type: boolean

concurrency:
  group: backend-dev-deploy-${{ github.ref }}
  cancel-in-progress: true  # Cancel previous runs for dev

jobs:
  validate-backend:
    name: Validate Backend Code
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: üîÑ Checkout repository
      uses: actions/checkout@v4
      
    - name: ü¶ï Setup Deno
      uses: denoland/setup-deno@v2
      with:
        deno-version: v2.4.x
        
    - name: üîß Verify Deno installation
      run: |
        deno --version
        echo "‚úÖ Deno is ready for TypeScript compilation checks"
        
    - name: üîç TypeScript compilation check
      working-directory: ./backend
      run: |
        # Check if TypeScript files can be compiled using Deno
        find supabase/functions -name "*.ts" -type f | while read -r file; do
          echo "Checking TypeScript syntax: $file"
          deno check "$file" || {
            echo "‚ùå TypeScript error in $file"
            exit 1
          }
        done
        echo "‚úÖ All TypeScript files are valid"
        
    - name: üß™ Validate Edge Function structure
      working-directory: ./backend
      run: |
        echo "üîç Validating Edge Function structure..."
        
        # Check that each function has an index.ts file (exclude _shared directory)
        for func_dir in supabase/functions/*/; do
          func_name=$(basename "$func_dir")
          
          # Skip _shared directory as it's not a function
          if [ "$func_name" = "_shared" ]; then
            echo "‚ÑπÔ∏è Skipping _shared directory (utility/shared code)"
            continue
          fi
          
          if [ ! -f "${func_dir}index.ts" ]; then
            echo "‚ùå Missing index.ts in function: $func_name"
            exit 1
          fi
          
          # Check for basic Deno serve pattern
          if ! grep -q "Deno.serve" "${func_dir}index.ts"; then
            echo "‚ö†Ô∏è Function $func_name might not follow Deno.serve pattern"
          fi
          
          echo "‚úÖ Function $func_name structure is valid"
        done
        
    - name: üîí Security scan
      working-directory: ./backend
      run: |
        echo "üîí Running basic security checks..."
        
        # Check for potential security issues
        if grep -r "console.log.*password\|console.log.*secret\|console.log.*key" supabase/functions/ 2>/dev/null; then
          echo "‚ö†Ô∏è Found potential credential logging"
        fi
        
        # Check for hardcoded URLs
        if grep -r "localhost\|127.0.0.1" supabase/functions/ --exclude-dir=node_modules 2>/dev/null; then
          echo "‚ÑπÔ∏è Found localhost references (may be intentional for dev)"
        fi
        
        echo "‚úÖ Security scan completed"

  deploy-to-development:
    name: Deploy to Development Environment
    runs-on: ubuntu-latest
    needs: validate-backend
    timeout-minutes: 15
    environment: 
      name: ${{ github.event.inputs.environment || 'development' }}
    
    outputs:
      DEPLOY_ENV: ${{ steps.env-setup.outputs.deploy_env }}
      PROJECT_REF: ${{ steps.env-setup.outputs.project_ref }}
      
    steps:
    - name: üîÑ Checkout repository
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: üîß Install Supabase CLI
      run: |
        # Install Supabase CLI using GitHub releases (latest version)
        SUPABASE_VERSION="2.33.9"
        curl -fsSL "https://github.com/supabase/cli/releases/download/v${SUPABASE_VERSION}/supabase_linux_amd64.tar.gz" | tar -xz -C /tmp
        sudo mv /tmp/supabase /usr/local/bin/supabase
        chmod +x /usr/local/bin/supabase
        
    - name: ‚úÖ Verify Supabase CLI
      run: |
        # Make sure CLI is accessible
        supabase --version
        echo "‚úÖ Supabase CLI is ready"
      
    - name: üîç Determine deployment environment
      id: env-setup
      run: |
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          echo "PROJECT_REF=${{ secrets.SUPABASE_STAGING_PROJECT_REF }}" >> $GITHUB_ENV
          echo "deploy_env=staging" >> $GITHUB_OUTPUT
          echo "project_ref=${{ secrets.SUPABASE_STAGING_PROJECT_REF }}" >> $GITHUB_OUTPUT
        else
          echo "DEPLOY_ENV=development" >> $GITHUB_ENV
          echo "PROJECT_REF=${{ secrets.SUPABASE_DEV_PROJECT_REF }}" >> $GITHUB_ENV
          echo "deploy_env=development" >> $GITHUB_OUTPUT
          echo "project_ref=${{ secrets.SUPABASE_DEV_PROJECT_REF }}" >> $GITHUB_OUTPUT
        fi
        
        echo "üéØ Deploying to: ${{ env.DEPLOY_ENV }}"
        echo "üìç Project reference: ${{ env.PROJECT_REF }}"
      
    - name: ‚úÖ Validate Supabase connection
      working-directory: ./backend
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        echo "üîó Testing Supabase connection to ${{ env.DEPLOY_ENV }}..."
        if [ -z "${{ env.PROJECT_REF }}" ]; then
          echo "‚ùå Project reference not set for ${{ env.DEPLOY_ENV }}"
          exit 1
        fi
        supabase projects list --token "$SUPABASE_ACCESS_TOKEN" > /dev/null
        echo "‚úÖ Supabase connection successful"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: üìù Create development environment file
      working-directory: ./backend
      run: |
        echo "üìù Creating ${{ env.DEPLOY_ENV }} environment file..."
        cat > .env.${{ env.DEPLOY_ENV }} << EOF
        # Supabase Configuration (${{ env.DEPLOY_ENV }})
        SUPABASE_PROJECT_REF=${{ env.PROJECT_REF }}
        SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_URL=https://${{ env.PROJECT_REF }}.supabase.co
        SUPABASE_ANON_KEY=${{ secrets.SUPABASE_DEV_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_DEV_SERVICE_ROLE_KEY }}
        
        # LLM Configuration (Development)
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_DEV || secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY_DEV || secrets.ANTHROPIC_API_KEY }}
        LLM_PROVIDER=${{ secrets.LLM_PROVIDER || 'openai' }}
        
        # Authentication (Development)
        GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID_DEV || secrets.GOOGLE_OAUTH_CLIENT_ID }}
        GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET_DEV || secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
        
        # Application URLs (Development)
        SITE_URL=https://${{ env.PROJECT_REF }}.supabase.co
        ADDITIONAL_REDIRECT_URLS=http://localhost:3000/auth/callback,https://disciplefy-dev.vercel.app/auth/callback
        
        # Security (Development)
        JWT_SECRET=${{ secrets.JWT_SECRET_DEV || secrets.JWT_SECRET }}
        
        # Development settings
        LOG_LEVEL=debug
        USE_MOCK=${{ env.DEPLOY_ENV == 'development' && 'true' || 'false' }}
        NODE_ENV=${{ env.DEPLOY_ENV }}
        ANONYMOUS_RATE_LIMIT=10
        AUTHENTICATED_RATE_LIMIT=20
        API_REQUEST_LIMIT=200
        EOF
        echo "‚úÖ ${{ env.DEPLOY_ENV }} environment file created"
    
    - name: üîó Link to Supabase project
      working-directory: ./backend
      run: |
        echo "üîó Linking to Supabase ${{ env.DEPLOY_ENV }} project..."
        supabase link --project-ref "${{ env.PROJECT_REF }}"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
    
    - name: üóÑÔ∏è Deploy Database Migrations
      if: ${{ github.event.inputs.deploy_migrations != 'false' }}
      working-directory: ./backend
      run: |
        echo "üóÑÔ∏è Deploying database migrations to ${{ env.DEPLOY_ENV }}..."
        if [ -d "supabase/migrations" ] && [ "$(ls -A supabase/migrations 2>/dev/null)" ]; then
          supabase db push --project-ref "${{ env.PROJECT_REF }}"
          echo "‚úÖ Database migrations deployed to ${{ env.DEPLOY_ENV }}"
        else
          echo "‚ÑπÔ∏è No migrations to deploy"
        fi
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
    
    - name: üîí Deploy RLS Policies
      if: ${{ github.event.inputs.deploy_policies == 'true' }}
      working-directory: ./backend
      run: |
        echo "üîí Deploying RLS policies to ${{ env.DEPLOY_ENV }}..."
        if [ -d "supabase/policies" ] && [ "$(ls -A supabase/policies 2>/dev/null)" ]; then
          for policy_file in supabase/policies/*.sql; do
            if [ -f "$policy_file" ]; then
              policy_name=$(basename "$policy_file" .sql)
              echo "üîê Applying policy: $policy_name"
              supabase db query --project-ref "${{ env.PROJECT_REF }}" --file "$policy_file"
            fi
          done
          echo "‚úÖ RLS policies deployed to ${{ env.DEPLOY_ENV }}"
        else
          echo "‚ÑπÔ∏è No RLS policies to deploy"
        fi
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: üì¶ Deploy Edge Functions
      if: ${{ github.event.inputs.deploy_functions != 'false' }}
      working-directory: ./backend
      run: |
        echo "üöÄ Deploying Edge Functions to ${{ env.DEPLOY_ENV }}..."
        
        # Deploy all functions with development settings
        supabase functions deploy --project-ref "${{ env.PROJECT_REF }}" --no-verify-jwt
        
        echo "‚úÖ Edge Functions deployed successfully to ${{ env.DEPLOY_ENV }}"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: üîë Update Function Secrets
      working-directory: ./backend
      run: |
        echo "üîë Updating Edge Function secrets for ${{ env.DEPLOY_ENV }}..."
        supabase secrets set --env-file .env.${{ env.DEPLOY_ENV }} --project-ref "${{ env.PROJECT_REF }}"
        echo "‚úÖ Function secrets updated for ${{ env.DEPLOY_ENV }}"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: üß™ Test development deployment
      working-directory: ./backend
      run: |
        echo "üß™ Testing ${{ env.DEPLOY_ENV }} deployment..."
        
        # Test health endpoint
        BASE_URL="https://${{ env.PROJECT_REF }}.supabase.co"
        
        if curl -f -s "$BASE_URL/rest/v1/" > /dev/null; then
          echo "‚úÖ Supabase REST API is healthy"
        else
          echo "‚ö†Ô∏è Supabase REST API test failed"
        fi
        
        # Test Edge Functions
        FUNCTIONS=("daily-verse" "topics-recommended")
        for func in "${FUNCTIONS[@]}"; do
          if curl -f -s "$BASE_URL/functions/v1/$func" > /dev/null; then
            echo "‚úÖ Function $func is responding"
          else
            echo "‚ö†Ô∏è Function $func test failed (may be expected for some functions)"
          fi
        done
        
        echo "üéâ ${{ env.DEPLOY_ENV }} deployment tests completed"
        
    - name: üìä Deployment summary
      run: |
        echo "üéâ Backend deployment to ${{ env.DEPLOY_ENV }} completed!"
        echo "üåê ${{ env.DEPLOY_ENV }} API: https://${{ env.PROJECT_REF }}.supabase.co"
        echo "üìã Deployed components:"
        echo "   ‚Ä¢ Edge Functions: ${{ github.event.inputs.deploy_functions != 'false' && '‚úÖ' || '‚è≠Ô∏è' }}"
        echo "   ‚Ä¢ Database Migrations: ${{ github.event.inputs.deploy_migrations != 'false' && '‚úÖ' || '‚è≠Ô∏è' }}"
        echo "   ‚Ä¢ RLS Policies: ${{ github.event.inputs.deploy_policies == 'true' && '‚úÖ' || '‚è≠Ô∏è' }}"
        echo "   ‚Ä¢ Function Secrets: ‚úÖ"
        
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "üîç This is a PR deployment for testing purposes"
          echo "üìù Review the changes and test the deployment before merging"
        fi
      
    - name: üßπ Security cleanup
      working-directory: ./backend
      if: always()
      run: |
        echo "üßπ Cleaning up sensitive files..."
        rm -f .env.${{ env.DEPLOY_ENV }}
        echo "‚úÖ Cleanup completed"

  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: deploy-to-development
    if: github.event_name == 'pull_request'
    
    steps:
    - name: üí¨ Comment deployment status
      uses: actions/github-script@v7
      with:
        script: |
          const deployEnv = '${{ needs.deploy-to-development.outputs.DEPLOY_ENV }}' || 'development';
          const projectRef = '${{ needs.deploy-to-development.outputs.PROJECT_REF }}';
          
          const comment = `## üöÄ Backend Development Deployment
          
          **Environment**: \`${deployEnv}\`
          **Status**: ‚úÖ Deployment Successful
          
          ### üîó Test URLs:
          - **API Base**: https://${projectRef}.supabase.co
          - **Functions**: https://${projectRef}.supabase.co/functions/v1/
          - **Studio**: https://app.supabase.com/project/${projectRef}
          
          ### üß™ Test Endpoints:
          - Daily Verse: https://${projectRef}.supabase.co/functions/v1/daily-verse
          - Topics: https://${projectRef}.supabase.co/functions/v1/topics-recommended
          
          **Note**: This deployment is for testing purposes. Changes will be deployed to production when this PR is merged to main.
          
          ---
          *Deployed from commit: ${context.sha.substring(0, 7)}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate-backend, deploy-to-development]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: üì¢ Deployment notification
      run: |
        if [ "${{ needs.deploy-to-development.result }}" = "success" ]; then
          echo "üéâ Backend deployment to ${{ github.event.inputs.environment || 'development' }} was successful!"
          echo "üåê Development API is now live"
          echo "üß™ Ready for testing and validation"
        else
          echo "‚ùå Backend deployment failed. Check the logs above."
          exit 1
        fi