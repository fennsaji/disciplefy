name: Database Migration Management

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/supabase/migrations/**'
      - '.github/workflows/database-migration.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Migration action'
        required: true
        default: 'apply'
        type: choice
        options:
        - apply
        - validate
        - rollback
      migration_file:
        description: 'Specific migration file (for rollback)'
        required: false
        type: string

concurrency:
  group: database-migration
  cancel-in-progress: false

jobs:
  validate-migrations:
    name: Validate Migration Files
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Supabase CLI
      run: npm install -g supabase@1.123.4
      
    - name: Validate migration syntax
      working-directory: ./backend
      run: |
        echo "🔍 Validating migration file syntax..."
        
        # Check for new migration files
        new_migrations=$(git diff --name-only HEAD~1 HEAD -- supabase/migrations/ | grep -E "\.sql$" || true)
        
        if [[ -z "$new_migrations" && "${{ github.event.inputs.action }}" != "validate" ]]; then
          echo "ℹ️ No new migration files detected"
          exit 0
        fi
        
        # Validate SQL syntax for new migrations
        for migration in $new_migrations; do
          echo "Validating: $migration"
          
          # Basic SQL syntax validation
          if ! grep -q -E "^--.*|^$|CREATE|ALTER|DROP|INSERT|UPDATE|DELETE|GRANT|REVOKE" "$migration"; then
            echo "❌ Migration $migration appears to have invalid SQL syntax"
            exit 1
          fi
          
          # Check for dangerous operations
          if grep -q -E "(DROP DATABASE|TRUNCATE|DELETE FROM.*WHERE)" "$migration"; then
            echo "⚠️ Migration $migration contains potentially dangerous operations"
            echo "Please review carefully and ensure proper safeguards"
          fi
          
          # Check for proper transaction handling
          if ! grep -q -E "(BEGIN|COMMIT)" "$migration" && grep -q -E "(CREATE|ALTER|DROP)" "$migration"; then
            echo "⚠️ Migration $migration might benefit from explicit transaction handling"
          fi
          
          echo "✅ $migration passed validation"
        done
        
    - name: Check migration naming convention
      working-directory: ./backend
      run: |
        echo "📝 Checking migration naming conventions..."
        
        # Check that migration files follow the naming pattern
        invalid_names=$(find supabase/migrations -name "*.sql" | grep -v -E "^supabase/migrations/[0-9]{14}_[a-z0-9_]+\.sql$" || true)
        
        if [[ -n "$invalid_names" ]]; then
          echo "❌ Migration files with invalid naming found:"
          echo "$invalid_names"
          echo ""
          echo "Migration files should follow the pattern: YYYYMMDDHHMMSS_description.sql"
          exit 1
        fi
        
        echo "✅ All migration files follow naming conventions"

  backup-database:
    name: Create Database Backup
    runs-on: ubuntu-latest
    needs: validate-migrations
    if: github.ref == 'refs/heads/main' && (github.event.inputs.action == 'apply' || github.event.inputs.action == '')
    timeout-minutes: 15
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Supabase CLI
      run: npm install -g supabase@1.123.4
      
    - name: Create database backup
      working-directory: ./backend
      run: |
        echo "💾 Creating database backup before migration..."
        
        # Create backup with timestamp
        backup_name="backup_$(date +%Y%m%d_%H%M%S)"
        
        echo "Creating backup: $backup_name"
        
        # Dump database schema and data
        supabase db dump \
          --project-ref "$SUPABASE_PROJECT_REF" \
          --data-only \
          --file "backups/${backup_name}_data.sql"
          
        supabase db dump \
          --project-ref "$SUPABASE_PROJECT_REF" \
          --schema-only \
          --file "backups/${backup_name}_schema.sql"
        
        echo "✅ Database backup created successfully"
        echo "Backup files: ${backup_name}_data.sql, ${backup_name}_schema.sql"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        
    - name: Upload backup artifacts
      uses: actions/upload-artifact@v4
      with:
        name: database-backup-${{ github.run_number }}
        path: backend/backups/
        retention-days: 30

  apply-migrations:
    name: Apply Database Migrations
    runs-on: ubuntu-latest
    needs: [validate-migrations, backup-database]
    if: github.ref == 'refs/heads/main' && (github.event.inputs.action == 'apply' || github.event.inputs.action == '')
    timeout-minutes: 20
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Supabase CLI
      run: npm install -g supabase@1.123.4
      
    - name: Check current migration status
      working-directory: ./backend
      run: |
        echo "📊 Current migration status:"
        supabase migration list --project-ref "$SUPABASE_PROJECT_REF"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        
    - name: Apply database migrations
      working-directory: ./backend
      run: |
        echo "🚀 Applying database migrations..."
        
        # Push migrations to remote database
        supabase db push --project-ref "$SUPABASE_PROJECT_REF"
        
        echo "✅ Database migrations applied successfully"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        
    - name: Verify migration results
      working-directory: ./backend
      run: |
        echo "🔍 Verifying migration results..."
        
        # Check final migration status
        echo "Final migration status:"
        supabase migration list --project-ref "$SUPABASE_PROJECT_REF"
        
        # Basic connectivity test
        echo "Testing database connectivity..."
        
        # Simple query to test database health
        if supabase db push --project-ref "$SUPABASE_PROJECT_REF" --dry-run; then
          echo "✅ Database is healthy and accessible"
        else
          echo "❌ Database connectivity issues detected"
          exit 1
        fi
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}

  rollback-migration:
    name: Rollback Migration
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'rollback'
    timeout-minutes: 15
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Supabase CLI
      run: npm install -g supabase@1.123.4
      
    - name: Perform migration rollback
      working-directory: ./backend
      run: |
        echo "⏪ Performing migration rollback..."
        
        migration_file="${{ github.event.inputs.migration_file }}"
        
        if [[ -z "$migration_file" ]]; then
          echo "❌ Migration file must be specified for rollback"
          exit 1
        fi
        
        echo "Rolling back migration: $migration_file"
        
        # Note: Supabase doesn't have direct rollback command
        # This would need to be implemented based on your rollback strategy
        # For now, this is a placeholder for manual rollback procedures
        
        echo "⚠️ Manual rollback required - please coordinate with database team"
        echo "Migration to rollback: $migration_file"
        
        # List current migrations for reference
        supabase migration list --project-ref "$SUPABASE_PROJECT_REF"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}

  migration-summary:
    name: Migration Summary
    runs-on: ubuntu-latest
    needs: [validate-migrations, backup-database, apply-migrations, rollback-migration]
    if: always()
    
    steps:
    - name: Create migration summary
      run: |
        echo "## 🗄️ Database Migration Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "**Action**: ${{ github.event.inputs.action || 'apply' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Validation results
        if [ "${{ needs.validate-migrations.result }}" = "success" ]; then
          echo "✅ **Migration Validation**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Migration Validation**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Backup results
        if [ "${{ needs.backup-database.result }}" = "success" ]; then
          echo "✅ **Database Backup**: Created successfully" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.backup-database.result }}" = "skipped" ]; then
          echo "⏭️ **Database Backup**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Database Backup**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Migration application results
        if [ "${{ needs.apply-migrations.result }}" = "success" ]; then
          echo "✅ **Migration Application**: Successful" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.apply-migrations.result }}" = "skipped" ]; then
          echo "⏭️ **Migration Application**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Migration Application**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Rollback results
        if [ "${{ needs.rollback-migration.result }}" = "success" ]; then
          echo "✅ **Migration Rollback**: Completed" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.rollback-migration.result }}" = "skipped" ]; then
          echo "⏭️ **Migration Rollback**: Not requested" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Migration Rollback**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 💾 Backup Information" >> $GITHUB_STEP_SUMMARY
        echo "- Database backups are stored as workflow artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Backup retention: 30 days" >> $GITHUB_STEP_SUMMARY
        echo "- Download from the Actions tab if rollback is needed" >> $GITHUB_STEP_SUMMARY