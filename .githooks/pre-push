#!/bin/bash
#
# Git Pre-Push Hook - Disciplefy Bible Study App
# 
# This hook performs comprehensive validation before pushing to remote repository.
# It runs more extensive checks than pre-commit to catch issues before they reach CI/CD.
#
# To install: git config core.hooksPath .githooks
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Pre-push Hook: Running comprehensive validation...${NC}"
echo ""

# Get the root directory of the repository
REPO_ROOT=$(git rev-parse --show-toplevel)
cd "$REPO_ROOT"

# Track overall success
OVERALL_SUCCESS=true

# Get remote and branch info
remote="$1"
url="$2"
branch=$(git rev-parse --abbrev-ref HEAD)

echo -e "${CYAN}üì° Push details:${NC}"
echo "   Remote: $remote"
echo "   Branch: $branch"
echo "   URL: $url"
echo ""

# Function to check if directory has changes since last push
has_changes_since_push() {
    local dir="$1"
    local upstream=$(git rev-parse --abbrev-ref @{upstream} 2>/dev/null || echo "origin/$branch")
    git diff --name-only "$upstream"..HEAD | grep -q "^$dir/" 2>/dev/null
}

# Enhanced Backend Validation
echo -e "${YELLOW}üì¶ Backend Validation (Enhanced)...${NC}"
if [ -d "backend" ] && (has_changes_since_push "backend" || git diff --name-only HEAD~1..HEAD | grep -q "\.ts$"); then
    cd "$REPO_ROOT/backend"
    
    # Check Deno availability
    if ! command -v deno &> /dev/null; then
        echo -e "${RED}‚ùå Deno not found${NC}"
        OVERALL_SUCCESS=false
    else
        echo "üîß Using: $(deno --version | head -n1)"
        
        # Run comprehensive TypeScript compilation check
        echo "üîç Running comprehensive TypeScript validation..."
        if ./scripts/check-compilation.sh >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Backend TypeScript: PASSED${NC}"
        else
            echo -e "${RED}‚ùå Backend TypeScript: FAILED${NC}"
            echo ""
            echo -e "${RED}Detailed errors:${NC}"
            ./scripts/check-compilation.sh 2>&1 | sed 's/^/   /'
            OVERALL_SUCCESS=false
        fi
        
        # Check for potential security issues in Edge Functions
        echo "üîí Checking for security patterns..."
        security_issues=0
        
        # Check for hardcoded secrets or API keys
        if grep -r -i "api[_-]key\|secret\|password" supabase/functions/ --include="*.ts" | grep -v "process.env" | grep -v "Deno.env" | grep -v "// " | grep -v "* " >/dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  Potential hardcoded secrets found:${NC}"
            grep -r -i "api[_-]key\|secret\|password" supabase/functions/ --include="*.ts" | grep -v "process.env" | grep -v "Deno.env" | grep -v "// " | grep -v "* " | sed 's/^/   /' | head -5
            ((security_issues++))
        fi
        
        # Check for console.log statements (should use proper logging)
        if grep -r "console\.log" supabase/functions/ --include="*.ts" >/dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  console.log statements found (use proper logging):${NC}"
            grep -r "console\.log" supabase/functions/ --include="*.ts" | sed 's/^/   /' | head -3
            ((security_issues++))
        fi
        
        if [ $security_issues -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Security check: PASSED${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Security check: $security_issues issues found${NC}"
            # Don't fail for security warnings, just warn
        fi
    fi
    
    cd "$REPO_ROOT"
else
    echo -e "${BLUE}‚ÑπÔ∏è  No backend changes since last push - skipping backend validation${NC}"
fi

echo ""

# Enhanced Frontend Validation
echo -e "${YELLOW}üì± Frontend Validation (Enhanced)...${NC}"
if [ -d "frontend" ] && (has_changes_since_push "frontend" || git diff --name-only HEAD~1..HEAD | grep -q "\.dart$"); then
    cd "$REPO_ROOT/frontend"
    
    # Check Flutter availability
    if ! command -v flutter &> /dev/null; then
        echo -e "${RED}‚ùå Flutter not found${NC}"
        OVERALL_SUCCESS=false
    else
        echo "üîß Using: $(flutter --version | head -n1)"
        
        # Get dependencies
        echo "üì¶ Updating Flutter dependencies..."
        if flutter pub get >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Dependencies: OK${NC}"
        else
            echo -e "${RED}‚ùå Flutter pub get failed${NC}"
            OVERALL_SUCCESS=false
        fi
        
        # Run comprehensive analysis
        echo "üîç Running comprehensive Flutter analysis..."
        if flutter analyze >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Flutter analysis: PASSED${NC}"
        else
            echo -e "${RED}‚ùå Flutter analysis: FAILED${NC}"
            echo ""
            echo -e "${RED}Analysis errors:${NC}"
            flutter analyze 2>&1 | sed 's/^/   /'
            OVERALL_SUCCESS=false
        fi
        
        # Check Dart formatting - VALIDATION ONLY (NO FILE MODIFICATIONS)
        echo "üé® Checking Dart formatting..."
        
        # Use --set-exit-if-changed to validate formatting without modifying files
        if dart format --set-exit-if-changed --output=none lib/ test/ >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Dart formatting: PASSED${NC}"
        else
            echo -e "${RED}‚ùå Dart formatting: FAILED${NC}"
            echo ""
            echo -e "${RED}Dart files need formatting. Please run:${NC}"
            echo -e "${RED}   dart format lib/ test/${NC}"
            echo -e "${RED}   git add lib/ test/${NC}"
            echo -e "${RED}   git commit -m \"Fix dart formatting\"${NC}"
            echo ""
            echo -e "${RED}Dart files that need formatting:${NC}"
            # Show which files need formatting without modifying them
            dart format --set-exit-if-changed lib/ test/ 2>&1 | grep -E "^Changed|^Formatted" | sed 's/^/   /' | head -10
            OVERALL_SUCCESS=false
        fi
        
        # Run tests if they exist
        if [ -d "test" ] && [ "$(find test -name "*.dart" | wc -l)" -gt 0 ]; then
            echo "üß™ Running Flutter tests..."
            if flutter test >/dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ Flutter tests: PASSED${NC}"
            else
                echo -e "${RED}‚ùå Flutter tests: FAILED${NC}"
                echo ""
                echo -e "${RED}Test failures:${NC}"
                flutter test 2>&1 | sed 's/^/   /'
                OVERALL_SUCCESS=false
            fi
        else
            echo -e "${BLUE}‚ÑπÔ∏è  No tests found - skipping test execution${NC}"
        fi
        
        # Check for potential issues
        echo "üîç Checking for Flutter best practices..."
        practices_issues=0
        
        # Check for TODO comments
        if grep -r "TODO\|FIXME\|HACK" lib/ --include="*.dart" >/dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  TODO/FIXME comments found:${NC}"
            grep -r "TODO\|FIXME\|HACK" lib/ --include="*.dart" | sed 's/^/   /' | head -3
            ((practices_issues++))
        fi
        
        # Check for print statements (should use proper logging)
        if grep -r "print(" lib/ --include="*.dart" >/dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  print() statements found (use proper logging):${NC}"
            grep -r "print(" lib/ --include="*.dart" | sed 's/^/   /' | head -3
            ((practices_issues++))
        fi
        
        if [ $practices_issues -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Best practices check: PASSED${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Best practices: $practices_issues issues found${NC}"
            # Don't fail for best practice warnings
        fi
    fi
    
    cd "$REPO_ROOT"
else
    echo -e "${BLUE}‚ÑπÔ∏è  No frontend changes since last push - skipping frontend validation${NC}"
fi

echo ""

# Branch-specific validations
echo -e "${YELLOW}üåø Branch-specific validations...${NC}"

case "$branch" in
    "main"|"master")
        echo -e "${RED}üö® Pushing to main/master branch!${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Ensure this push has been reviewed and approved${NC}"
        
        # Check if there are any merge commits
        if git log --oneline -1 | grep -q "Merge"; then
            echo -e "${GREEN}‚úÖ Merge commit detected - likely from PR${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Direct commit to main branch detected${NC}"
        fi
        ;;
    "develop"|"development")
        echo -e "${CYAN}üîÑ Pushing to development branch${NC}"
        echo -e "${GREEN}‚úÖ Development branch push is appropriate${NC}"
        ;;
    *)
        echo -e "${CYAN}üå± Pushing to feature branch: $branch${NC}"
        echo -e "${GREEN}‚úÖ Feature branch push is appropriate${NC}"
        ;;
esac

echo ""

# Git repository health checks
echo -e "${YELLOW}üîç Repository health checks...${NC}"

# Check for large files (fixed to handle files with spaces)
large_files=$(git ls-files -z | xargs -0 ls -la 2>/dev/null | awk '$5 > 10485760 {print $9, $5}' | wc -l)
if [ "$large_files" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Large files detected (>10MB):${NC}"
    git ls-files -z | xargs -0 ls -la 2>/dev/null | awk '$5 > 10485760 {printf "   %s (%.1f MB)\n", $9, $5/1048576}' | head -5
else
    echo -e "${GREEN}‚úÖ No large files detected${NC}"
fi

# Check for potential sensitive files
sensitive_patterns=".env .key .pem .p12 .keystore id_rsa"
sensitive_found=0
for pattern in $sensitive_patterns; do
    if git ls-files | grep -q "$pattern"; then
        if [ $sensitive_found -eq 0 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Potential sensitive files detected:${NC}"
            sensitive_found=1
        fi
        git ls-files | grep "$pattern" | sed 's/^/   /'
    fi
done

if [ $sensitive_found -eq 0 ]; then
    echo -e "${GREEN}‚úÖ No sensitive files detected in repository${NC}"
fi

echo ""

# Final validation result
if [ "$OVERALL_SUCCESS" = true ]; then
    echo -e "${GREEN}üéâ Pre-push validation PASSED! Proceeding with push...${NC}"
    echo ""
    echo -e "${CYAN}üìã Push Summary:${NC}"
    echo "   ‚Ä¢ Backend compilation: ‚úÖ"
    echo "   ‚Ä¢ Frontend analysis: ‚úÖ"
    echo "   ‚Ä¢ Security checks: ‚úÖ"
    echo "   ‚Ä¢ Repository health: ‚úÖ"
    echo ""
    exit 0
else
    echo -e "${RED}üö® Pre-push validation FAILED!${NC}"
    echo -e "${RED}Critical issues must be resolved before pushing.${NC}"
    echo ""
    echo -e "${YELLOW}üí° Troubleshooting:${NC}"
    echo -e "${YELLOW}   ‚Ä¢ Backend: Run './backend/scripts/check-compilation.sh'${NC}"
    echo -e "${YELLOW}   ‚Ä¢ Frontend: Run 'flutter analyze' and 'flutter test'${NC}"
    echo -e "${YELLOW}   ‚Ä¢ Skip validation (NOT recommended): git push --no-verify${NC}"
    echo ""
    exit 1
fi